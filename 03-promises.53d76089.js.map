{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,UAAWJ,SAASC,cAAc,0BA2BpC,SAASI,EAAcC,EAAUP,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEL,E,MAAUP,IAEpBa,EAAO,C,SAAEN,E,MAAUP,GAAQ,GAE5BA,EAAM,G,CAjCbD,EAAKM,UAAUU,iBAAiB,SAEhC,SAA+BC,GAC7BA,EAAMC,iBACN,IAAIC,EAAQC,OAAOpB,EAAKC,MAAMoB,OAC1BjB,EAAOgB,OAAOpB,EAAKI,KAAKiB,OACxBhB,EAASe,OAAOpB,EAAKK,OAAOgB,OAEhC,IAAK,IAAIC,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAChCf,EAAce,EAAGH,GACdI,MAAK,EAACf,SAAEA,EAAQP,MAAEA,MACjBuB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBlB,QAAiBP,OAC5D0B,QAAMC,IAAI,uBAAqBpB,QAAiBP,MAAU,IAE7D4B,OAAM,EAACrB,SAAEA,EAAQP,MAAEA,MAClBuB,EAAA1B,GAAS2B,OAAOK,QAAQ,sBAAoBtB,QAAiBP,OAC3D0B,QAAMC,IAAI,sBAAoBpB,QAAeP,MAAU,IAG7DkB,GAASf,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\n\nrefs.submitBtn.addEventListener('click', onSubmitButtonHandler);\n\nfunction onSubmitButtonHandler(event) {\n  event.preventDefault();\n  let delay = Number(refs.delay.value);\n  let step = Number(refs.step.value);\n  let amount = Number(refs.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","delay","document","querySelector","step","amount","submitBtn","$47d4ff9957288465$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.53d76089.js.map"}